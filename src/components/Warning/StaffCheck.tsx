import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import toast from 'react-hot-toast';
import {
  AlertTriangle,
  User,
  Mail,
  FileText,
  ChevronDown,
  ChevronUp,
  Plus,
  X,
  Loader2,
  Calendar,
  Search,
  Filter,
  Clock,
  Building,
  BadgeAlert,
  ChevronLeft,
  ChevronRight,
  Sparkles,
  Brain,
  Zap
} from 'lucide-react';

// Define the DeepSeekResponse interface
interface DeepSeekResponse {
  response: string;
  metadata?: any;
}

// AI query function
const queryDeepSeek = async (
  prompt: string,
  context: string
): Promise<DeepSeekResponse> => {
  const apiKey = import.meta.env.VITE_DEEPSEEK_API_KEY;

  if (!apiKey) {
    throw new Error('DeepSeek API key is not configured');
  }

  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: `You are an HR assistant. Analyze this HR data and respond helpfully: ${context}`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7
    })
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.error?.message || 'DeepSeek API request failed');
  }

  const data = await response.json();
  return {
    response: data.choices[0].message.content,
    metadata: data.usage
  };
};

export default function WarningModule() {
  const [employees, setEmployees] = useState([]);
  const [warnings, setWarnings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState('');
  const [warningType, setWarningType] = useState('');
  const [severity, setSeverity] = useState('medium');
  const [customMessage, setCustomMessage] = useState('');
  const [useCustomMessage, setUseCustomMessage] = useState(false);
  const [showTemplates, setShowTemplates] = useState(false);
  const [employeeSearchTerm, setEmployeeSearchTerm] = useState('');
  const [warningSearchTerm, setWarningSearchTerm] = useState('');
  const [aiLoading, setAiLoading] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [editingTemplate, setEditingTemplate] = useState(null);
  const [showEmployeeDropdown, setShowEmployeeDropdown] = useState(false);
  const [aiSpecificities, setAiSpecificities] = useState('');
  const [aiAutoGenerated, setAiAutoGenerated] = useState(false);

  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);

  // Predefined warning templates
  const [warningTemplates, setWarningTemplates] = useState([
    {
      id: 1,
      type: 'Tardiness',
      subject: 'Warning Regarding Frequent Tardiness',
      message: 'This is a formal warning regarding your frequent tardiness. Continued violations may result in further disciplinary action.'
    },
    {
      id: 2,
      type: 'Performance',
      subject: 'Warning Regarding Performance Issues',
      message: 'This is a formal warning regarding your recent performance which has not met the expected standards. We expect to see immediate improvement.'
    },
    {
      id: 3,
      type: 'Conduct',
      subject: 'Warning Regarding Unprofessional Conduct',
      message: 'This is a formal warning regarding your recent behavior which violates our code of conduct. Further incidents may lead to disciplinary action.'
    },
    {
      id: 4,
      type: 'Policy Violation',
      subject: 'Warning Regarding Policy Violation',
      message: 'This is a formal warning regarding your violation of company policy. Please review the employee handbook and ensure compliance moving forward.'
    }
  ]);

  useEffect(() => {
    fetchEmployees();
    fetchWarnings();
  }, []);

  const fetchEmployees = async () => {
    try {
      console.log('Fetching employees...');
      
      const { data, error } = await supabase
        .from('employees')
        .select('*')
        .order('"Employee Number"', { ascending: true });

      if (error) {
        console.error('Error fetching employees:', error);
        toast.error('Failed to load employees');
        return;
      }
      
      console.log('Raw employee data:', data);
      
      // Format employee data using the actual table column names
      const formattedEmployees = (data || []).map(emp => {
        const employeeNumber = emp['Employee Number'];
        const firstName = emp['First Name'] || '';
        const lastName = emp['Last Name'] || '';
        const middleName = emp['Middle Name'] || '';
        const email = emp['Work Email'] || '';
        const department = emp['Job Title'] || emp['Department'] || 'N/A';
        const town = emp['Town'] || emp['City'] || '';
        
        // Construct full name with proper handling of middle name
        let fullName = firstName;
        if (middleName) {
          fullName += ` ${middleName}`;
        }
        if (lastName) {
          fullName += ` ${lastName}`;
        }
        
        return {
          ...emp,
          employeeNumber,
          fullName: fullName.trim() || 'Unknown Employee',
          firstName,
          lastName,
          middleName,
          email,
          department,
          town
        };
      });
      
      console.log('Formatted employees:', formattedEmployees);
      setEmployees(formattedEmployees);
    } catch (error) {
      console.error('Error in fetchEmployees:', error);
      toast.error('Failed to load employees');
    }
  };

  const fetchWarnings = async () => {
    try {
      const { data: warningsData, error: warningsError } = await supabase
        .from("warnings")
        .select("*")
        .order("issued_at", { ascending: false });

      if (warningsError) throw warningsError;

      // Get all unique employee numbers from warnings
      const employeeNumbers = [...new Set(warningsData.map(w => w.employee_id))].filter(Boolean);
      
      // Fetch employee data for these employee numbers
      let employeesData = [];
      if (employeeNumbers.length > 0) {
        const { data: empData, error: empError } = await supabase
          .from('employees')
          .select('*')
          .in('"Employee Number"', employeeNumbers);
        
        if (empError) {
          console.error('Error fetching employee details:', empError);
        } else {
          employeesData = empData || [];
        }
      }

      // Combine warnings with employee data
      const formattedWarnings = (warningsData || []).map(warning => {
        const employee = employeesData.find(emp => emp['Employee Number'] === warning.employee_id);
        
        let fullName = 'Unknown Employee';
        let email = 'No email';
        let department = 'No department';
        
        if (employee) {
          const firstName = employee['First Name'] || '';
          const middleName = employee['Middle Name'] || '';
          const lastName = employee['Last Name'] || '';
          
          // Construct full name
          fullName = firstName;
          if (middleName) {
            fullName += ` ${middleName}`;
          }
          if (lastName) {
            fullName += ` ${lastName}`;
          }
          fullName = fullName.trim() || 'Unknown Employee';
          
          email = employee['Work Email'] || 'No email';
          department = employee['Job Title'] || employee['Department'] || 'No department';
        }
        
        return {
          ...warning,
          employeeData: {
            fullName,
            email,
            department,
            employeeNumber: warning.employee_id
          }
        };
      });

      setWarnings(formattedWarnings);
    } catch (error) {
      console.error("Error fetching warnings:", error);
      toast.error("Failed to load warnings");
    } finally {
      setLoading(false);
    }
  };

  const handleTemplateSelect = (template) => {
    setWarningType(template.type);
    setCustomMessage(template.message);
    setSelectedTemplate(template);
    setShowTemplates(false);
    setUseCustomMessage(false);
    setEditingTemplate(null);
    setAiAutoGenerated(false);
  };

  const handleEditTemplate = (template) => {
    setEditingTemplate({...template});
    setCustomMessage(template.message);
    setWarningType(template.type);
  };

  const handleSaveTemplateEdit = () => {
    if (!editingTemplate) return;
    
    const updatedTemplates = warningTemplates.map(t => 
      t.id === editingTemplate.id ? editingTemplate : t
    );
    
    setWarningTemplates(updatedTemplates);
    setCustomMessage(editingTemplate.message);
    setWarningType(editingTemplate.type);
    setSelectedTemplate(editingTemplate);
    setEditingTemplate(null);
    toast.success('Template updated');
  };

  const handleCancelTemplateEdit = () => {
    if (selectedTemplate) {
      setCustomMessage(selectedTemplate.message);
      setWarningType(selectedTemplate.type);
    }
    setEditingTemplate(null);
  };

  const generateAIMessageStandalone = async () => {
    if (!selectedEmployee || !aiSpecificities.trim()) {
      toast.error('Please select an employee and provide AI specificities');
      return;
    }

    setAiLoading(true);
    
    try {
      const employee = employees.find(emp => emp.employeeNumber === selectedEmployee);
      
      if (!employee) {
        throw new Error('Selected employee not found');
      }
      
      const context = `
        Employee: ${employee.fullName}
        Department: ${employee.department}
        Severity Level: ${severity}
        AI Specificities: ${aiSpecificities}
      `;
      
      const prompt = `Based on the following specificities, generate a professional HR warning message and suggest an appropriate warning type: "${aiSpecificities}". 

Please format your response as:
WARNING TYPE: [suggested type]
MESSAGE: [professional warning message]

Make sure to incorporate the severity level (${severity}) and be specific about the issues mentioned in the specificities.`;
      
      const aiResponse = await queryDeepSeek(prompt, context);
      
      // Parse AI response to extract type and message
      const responseLines = aiResponse.response.split('\n');
      let suggestedType = '';
      let generatedMessage = '';
      
      for (let line of responseLines) {
        if (line.startsWith('WARNING TYPE:')) {
          suggestedType = line.replace('WARNING TYPE:', '').trim();
        } else if (line.startsWith('MESSAGE:')) {
          generatedMessage = line.replace('MESSAGE:', '').trim();
        } else if (generatedMessage) {
          generatedMessage += '\n' + line;
        }
      }
      
      // If parsing failed, use the entire response as message
      if (!generatedMessage) {
        generatedMessage = aiResponse.response;
        suggestedType = 'AI Generated Warning';
      }
      
      setWarningType(suggestedType);
      setCustomMessage(generatedMessage.trim());
      setUseCustomMessage(true);
      setAiAutoGenerated(true);
      setSelectedTemplate(null); // Clear any selected template
      
      toast.success('AI message generated successfully!');
    } catch (error) {
      console.error('Error generating AI message:', error);
      toast.error(`Failed to generate message: ${error.message}`);
    } finally {
      setAiLoading(false);
    }
  };

  const generateAIMessage = async () => {
    if (!selectedEmployee || !warningType) {
      toast.error('Please select an employee and warning type first');
      return;
    }

    setAiLoading(true);
    
    try {
      const employee = employees.find(emp => emp.employeeNumber === selectedEmployee);
      
      if (!employee) {
        throw new Error('Selected employee not found');
      }
      
      const context = `
        Employee: ${employee.fullName}
        Department: ${employee.department}
        Warning Type: ${warningType}
        Severity: ${severity}
        ${aiSpecificities ? `Additional Requirements: ${aiSpecificities}` : ''}
      `;
      
      let prompt = `Generate a professional HR warning message for ${warningType} with ${severity} severity level.`;
      
      if (aiSpecificities.trim()) {
        prompt += ` Please incorporate these specific requirements: ${aiSpecificities}`;
      }
      
      const aiResponse = await queryDeepSeek(prompt, context);
      setCustomMessage(aiResponse.response);
      setUseCustomMessage(true);
      toast.success('AI message generated with your specificities');
    } catch (error) {
      console.error('Error generating AI message:', error);
      toast.error(`Failed to generate message: ${error.message}`);
    } finally {
      setAiLoading(false);
    }
  };

  const sendWarning = async (e) => {
    e.preventDefault();
    if (!selectedEmployee || (!warningType && !aiAutoGenerated)) {
      toast.error('Please select an employee and warning type');
      return;
    }

    setSending(true);
    
    try {
      const employee = employees.find(emp => emp.employeeNumber === selectedEmployee);
      
      if (!employee) {
        throw new Error('Selected employee not found');
      }
      
      // 1. Save warning to database
      const { data: warningData, error: warningError } = await supabase
        .from('warnings')
        .insert([
          {
            employee_id: selectedEmployee,
            type: warningType || 'AI Generated Warning',
            severity: severity,
            message: customMessage,
            issued_at: new Date().toISOString()
          }
        ])
        .select();

      if (warningError) throw warningError;

      // 2. Send email (if email exists)
      if (employee.email) {
        const subject = warningTemplates.find(t => t.type === warningType)?.subject || `Warning: ${warningType || 'AI Generated Warning'}`;
        
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_FUNCTION_URL}/dynamic-api`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`
          },
          body: JSON.stringify({
            to_email: employee.email,
            subject: subject,
            html_content: `
              <div style="font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e2e8f0; border-radius: 8px;">
                <h2 style="color: #dc2626; text-align: center;">Official Warning Notice</h2>
                
                <div style="background-color: #fef2f2; padding: 16px; border-radius: 8px; margin: 16px 0;">
                  <p style="font-weight: bold; margin-bottom: 8px;">Dear ${employee.fullName},</p>
                  <p>This is an official warning regarding: <strong>${warningType || 'AI Generated Warning'}</strong></p>
                  <p>Severity: <span style="color: ${severity === 'high' ? '#dc2626' : severity === 'medium' ? '#ea580c' : '#ca8a04'}">${severity}</span></p>
                </div>
                
                <div style="padding: 16px; border-left: 4px solid #fecaca; background-color: #fafafa; margin: 16px 0;">
                  <p style="font-style: italic;">${customMessage}</p>
                </div>
                
                <p style="font-size: 14px; color: #64748b;">Please take this warning seriously and address the issues mentioned above. Failure to improve may result in further disciplinary action.</p>
                
                <div style="margin-top: 24px; padding-top: 16px; border-top: 1px solid #e2e8f0; font-size: 12px; color: #64748b;">
                  <p>Please do not reply to this email.</p>
                </div>
              </div>
            `,
            from_email: 'noreply@zirahrapp.com'
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to send email');
        }
      }

      toast.success(`Warning sent to ${employee.fullName}`);
      resetForm();
      fetchWarnings();
      setCurrentPage(1); // Reset to first page after adding a new warning
    } catch (error) {
      console.error('Error sending warning:', error);
      toast.error(`Failed to send warning: ${error.message}`);
    } finally {
      setSending(false);
    }
  };

  const resetForm = () => {
    setSelectedEmployee('');
    setWarningType('');
    setSeverity('medium');
    setCustomMessage('');
    setUseCustomMessage(false);
    setShowForm(false);
    setSelectedTemplate(null);
    setEditingTemplate(null);
    setAiSpecificities('');
    setAiAutoGenerated(false);
    setEmployeeSearchTerm('');
    setShowEmployeeDropdown(false);
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'low': return 'bg-yellow-100 text-yellow-800';
      case 'medium': return 'bg-orange-100 text-orange-800';
      case 'high': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Filter warnings based on search term
  const filteredWarnings = warnings.filter(warning => {
    const searchLower = warningSearchTerm.toLowerCase();
    const employeeName = warning.employeeData?.fullName || '';
    const employeeEmail = warning.employeeData?.email || '';
    
    return (
      employeeName.toLowerCase().includes(searchLower) ||
      employeeEmail.toLowerCase().includes(searchLower) ||
      warning.type?.toLowerCase().includes(searchLower) ||
      warning.message?.toLowerCase().includes(searchLower)
    );
  });

  // Pagination logic
  const totalPages = Math.ceil(filteredWarnings.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedWarnings = filteredWarnings.slice(startIndex, startIndex + itemsPerPage);
  
  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  // Generate page numbers for pagination
  const getPageNumbers = () => {
    const pageNumbers = [];
    const maxVisiblePages = 5;
    
    if (totalPages <= maxVisiblePages) {
      // Show all pages if total pages is less than max visible
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
      }
    } else {
      // Always include first page
      pageNumbers.push(1);
      
      // Calculate start and end of visible page range
      let startPage = Math.max(2, currentPage - 1);
      let endPage = Math.min(totalPages - 1, currentPage + 1);
      
      // Adjust if we're near the beginning
      if (currentPage <= 3) {
        endPage = 4;
      }
      
      // Adjust if we're near the end
      if (currentPage >= totalPages - 2) {
        startPage = totalPages - 3;
      }
      
      // Add ellipsis after first page if needed
      if (startPage > 2) {
        pageNumbers.push('...');
      }
      
      // Add middle pages
      for (let i = startPage; i <= endPage; i++) {
        pageNumbers.push(i);
      }
      
      // Add ellipsis before last page if needed
      if (endPage < totalPages - 1) {
        pageNumbers.push('...');
      }
      
      // Always include last page
      pageNumbers.push(totalPages);
    }
    
    return pageNumbers;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center justify-center h-64">
            <div className="flex flex-col items-center space-y-4">
              <Loader2 className="w-12 h-12 text-blue-600 animate-spin" />
              <p className="text-gray-600 font-medium">Loading warnings...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-3">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Warning Module</h1>
              <p className="text-gray-600">Issue formal warnings to employees</p>
            </div>
          </div>
        </div>

        {/* Stats Card */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-xs border border-gray-200 p-6 transition-all hover:shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-500 uppercase tracking-wider">Total Warnings</p>
                <p className="text-3xl font-bold text-gray-900 mt-1">{warnings.length}</p>
              </div>
              <div className="w-14 h-14 bg-red-50 rounded-xl flex items-center justify-center">
                <AlertTriangle className="w-6 h-6 text-red-600" />
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-xs border border-gray-200 p-6 transition-all hover:shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-500 uppercase tracking-wider">High Severity</p>
                <p className="text-3xl font-bold text-gray-900 mt-1">
                  {warnings.filter(w => w.severity === 'high').length}
                </p>
              </div>
              <div className="w-14 h-14 bg-red-50 rounded-xl flex items-center justify-center">
                <BadgeAlert className="w-6 h-6 text-red-600" />
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-xs border border-gray-200 p-6 transition-all hover:shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-500 uppercase tracking-wider">This Month</p>
                <p className="text-3xl font-bold text-gray-900 mt-1">
                  {warnings.filter(w => {
                    const warningDate = new Date(w.issued_at);
                    const now = new Date();
                    return warningDate.getMonth() === now.getMonth() && 
                           warningDate.getFullYear() === now.getFullYear();
                  }).length}
                </p>
              </div>
              <div className="w-14 h-14 bg-red-50 rounded-xl flex items-center justify-center">
                <Calendar className="w-6 h-6 text-red-600" />
              </div>
            </div>
          </div>
        </div>

        {/* Action Bar */}
        <div className="bg-white rounded-xl shadow-xs border border-gray-200 p-5 mb-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div className="flex-1 w-full">
              <div className="relative">
                <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                <input
                  type="text"
                  placeholder="Search warnings..."
                  value={warningSearchTerm}
                  onChange={(e) => {
                    setWarningSearchTerm(e.target.value);
                    setCurrentPage(1); // Reset to first page when searching
                  }}
                  className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all"
                />
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="flex items-center">
                <label htmlFor="itemsPerPage" className="text-xs text-gray-600 mr-2">Show:</label>
                <select
                  id="itemsPerPage"
                  value={itemsPerPage}
                  onChange={(e) => {
                    setItemsPerPage(Number(e.target.value));
                    setCurrentPage(1); // Reset to first page when changing items per page
                  }}
                  className="border border-gray-300 rounded-md px-2 py-1 text-xs focus:ring-red-500 focus:border-red-500"
                >
                  <option value="5">5</option>
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="50">50</option>
                </select>
              </div>
              <button 
                onClick={() => setShowForm(!showForm)}
                className="flex items-center px-4 py-2.5 bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-lg hover:from-red-700 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-100 transition-all duration-200 font-medium text-xs shadow-sm"
              >
                <Plus className="w-4 h-4 mr-2" />
                Issue Warning
              </button>
            </div>
          </div>
        </div>

        {/* Warning Form */}
        {showForm && (
          <div className="bg-white rounded-xl shadow-xs border border-gray-200 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900">Issue New Warning</h2>
              <button 
                onClick={() => setShowForm(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <form onSubmit={sendWarning} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="relative">
                  <label className="block text-xs font-medium text-gray-700 mb-2">Select Employee</label>
                  
                  <input
                    type="text"
                    placeholder="Search employee by name, department or ID..."
                    value={employeeSearchTerm}
                    onChange={(e) => { 
                      setEmployeeSearchTerm(e.target.value);
                      setShowEmployeeDropdown(true);
                    }}
                    onFocus={() => setShowEmployeeDropdown(true)}
                    className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all"
                  />

                  {showEmployeeDropdown && employeeSearchTerm && (
                    <ul className="absolute z-10 w-full bg-white border border-gray-200 rounded-lg shadow-lg max-h-48 overflow-y-auto">
                      {employees
                        .filter((emp) => {
                          const search = employeeSearchTerm.toLowerCase();
                          return (
                            emp.fullName.toLowerCase().includes(search) ||
                            emp.department.toLowerCase().includes(search) ||
                            emp.employeeNumber.toString().toLowerCase().includes(search)
                          );
                        })
                        .map((emp) => (
                          <li
                            key={emp.employeeNumber}
                            onClick={() => {
                              const displayValue = `${emp.fullName} - ${emp.department} (ID: ${emp.employeeNumber})`;
                              setSelectedEmployee(emp.employeeNumber);
                              setEmployeeSearchTerm(displayValue);
                              setShowEmployeeDropdown(false);
                            }}
                            className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-xs"
                          >
                            {emp.fullName} - {emp.department} (ID: {emp.employeeNumber})
                          </li>
                        ))}
                    </ul>
                  )}
                </div>

                <div>
                  <label className="block text-xs font-medium text-gray-700 mb-2">Warning Type (Optional)</label>
                  <div className="relative">
                    <button
                      type="button"
                      onClick={() => setShowTemplates(!showTemplates)}
                      className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all text-left flex items-center justify-between"
                    >
                      {warningType || "Select a warning type (or use AI)"}
                      {showTemplates ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
                    </button>

                    {showTemplates && (
                      <div className="absolute z-10 mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg overflow-hidden">
                        {warningTemplates.map(template => (
                          <div
                            key={template.id}
                            onClick={() => handleTemplateSelect(template)}
                            className="px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors"
                          >
                            <p className="font-medium text-gray-900">{template.type}</p>
                            <p className="text-xs text-gray-600 truncate">{template.message.substring(0, 60)}...</p>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">Severity Level</label>
                <div className="flex space-x-4">
                  {['low', 'medium', 'high'].map(level => (
                    <label key={level} className="flex items-center">
                      <input
                        type="radio"
                        name="severity"
                        value={level}
                        checked={severity === level}
                        onChange={() => setSeverity(level)}
                        className="focus:ring-red-500 h-4 w-4 text-red-600"
                      />
                      <span className="ml-2 text-gray-700 capitalize">{level}</span>
                    </label>
                  ))}
                </div>
              </div>

              {/* Standalone AI Section */}
              <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-6 rounded-xl border border-purple-200">
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-xs font-medium text-gray-700">
                    <div className="flex items-center">
                      <Zap className="w-5 h-5 mr-2 text-purple-600" />
                      Generate message using AI
                    </div>
                  </label>
                  <div className="flex items-center space-x-2 bg-white px-3 py-1 rounded-full">
                    <Brain className="w-4 h-4 text-purple-600" />
                    <span className="text-xs font-medium text-purple-700">Smart AI</span>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <textarea
                    value={aiSpecificities}
                    onChange={(e) => setAiSpecificities(e.target.value)}
                    rows={4}
                    className="w-full px-4 py-3 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-all resize-none bg-white"
                    placeholder="Describe the warning situation in detail. For example:
• 'Employee has been late 5 times this month, coming in 15-30 minutes after 9 AM'
• 'Poor performance on quarterly reports with multiple errors and missed deadlines'
• 'Inappropriate behavior during team meetings, interrupting colleagues'
• 'Violation of dress code policy by wearing casual clothes on client meeting days'

The AI will automatically determine the warning type and generate a professional message."
                  />
                  
                  <div className="flex items-center justify-between">
                    <p className="text-xs text-purple-600">
                      💡 Just describe the situation - AI will handle the rest automatically!
                    </p>
                    <button
                      type="button"
                      onClick={generateAIMessageStandalone}
                      disabled={!selectedEmployee || !aiSpecificities.trim() || aiLoading}
                      className="flex items-center px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg text-xs hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-100 transition-all duration-200 disabled:opacity-50 shadow-sm"
                    >
                      {aiLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        <>
                          <Zap className="w-4 h-4 mr-2" />
                          Generate Warning
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>

              {/* Traditional Template Section */}
              {!aiAutoGenerated && (
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-xs font-medium text-gray-700">Warning Message</label>
                    <div className="flex items-center space-x-4">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={useCustomMessage}
                          onChange={() => setUseCustomMessage(!useCustomMessage)}
                          className="focus:ring-red-500 h-4 w-4 text-red-600"
                        />
                        <span className="ml-2 text-xs text-gray-700">Custom message</span>
                      </label>
                      {warningType && (
                        <button
                          type="button"
                          onClick={generateAIMessage}
                          disabled={!selectedEmployee || !warningType || aiLoading}
                          className="flex items-center px-3 py-1.5 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg text-xs hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-100 transition-all duration-200 disabled:opacity-50"
                        >
                          {aiLoading ? (
                            <Loader2 className="w-4 h-4 mr-1 animate-spin" />
                          ) : (
                            <Sparkles className="w-4 h-4 mr-1" />
                          )}
                          AI Enhance
                        </button>
                      )}
                    </div>
                  </div>

                  {editingTemplate ? (
                    <div className="space-y-3">
                      <input
                        type="text"
                        value={editingTemplate.type}
                        onChange={(e) => setEditingTemplate({...editingTemplate, type: e.target.value})}
                        className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all"
                      />
                      <textarea
                        value={editingTemplate.message}
                        onChange={(e) => setEditingTemplate({...editingTemplate, message: e.target.value})}
                        rows={4}
                        className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all"
                      />
                      <div className="flex justify-end space-x-2">
                        <button
                          type="button"
                          onClick={handleCancelTemplateEdit}
                          className="px-3 py-1.5 border border-gray-300 text-gray-700 bg-white rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-100 transition-all duration-200 text-xs"
                        >
                          Cancel
                        </button>
                        <button
                          type="button"
                          onClick={handleSaveTemplateEdit}
                          className="px-3 py-1.5 bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-lg hover:from-green-700 hover:to-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-100 transition-all duration-200 text-xs"
                        >
                          Save Template
                        </button>
                      </div>
                    </div>
                  ) : useCustomMessage ? (
                    <div className="space-y-3">
                      <textarea
                        value={customMessage}
                        onChange={(e) => setCustomMessage(e.target.value)}
                        rows={4}
                        className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 outline-none transition-all"
                        placeholder="Write your custom warning message here..."
                        required
                      />
                      {selectedTemplate && (
                        <button
                          type="button"
                          onClick={() => handleEditTemplate(selectedTemplate)}
                          className="text-xs text-blue-600 hover:text-blue-800 transition-colors"
                        >
                          Edit this template
                        </button>
                      )}
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <div className="bg-gray-50 border border-gray-300 rounded-lg p-4">
                        <p className="text-gray-700">{customMessage || 'Select a template or use AI to generate a message'}</p>
                      </div>
                      {selectedTemplate && (
                        <button
                          type="button"
                          onClick={() => handleEditTemplate(selectedTemplate)}
                          className="text-xs text-blue-600 hover:text-blue-800 transition-colors"
                        >
                          Edit this template
                        </button>
                      )}
                    </div>
                  )}
                </div>
              )}

              {/* AI Generated Message Display */}
              {aiAutoGenerated && (
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-xl border border-green-200">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                      <Sparkles className="w-5 h-5 mr-2 text-green-600" />
                      <span className="text-xs font-medium text-green-800">AI Generated Warning</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-xs text-green-600">Type: {warningType}</span>
                    </div>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-green-200">
                    <p className="text-gray-800">{customMessage}</p>
                  </div>
                  <div className="flex justify-between items-center mt-4">
                    <p className="text-xs text-green-600">
                      ✨ Message generated based on your specificities
                    </p>
                    <button
                      type="button"
                      onClick={() => {
                        setUseCustomMessage(true);
                        setAiAutoGenerated(false);
                      }}
                      className="text-xs text-blue-600 hover:text-blue-800 transition-colors"
                    >
                      Edit Message
                    </button>
                  </div>
                </div>
              )}

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowForm(false)}
                  className="px-4 py-2.5 border border-gray-300 text-gray-700 bg-white rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-100 transition-all duration-200 font-medium"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={sending || employees.length === 0 || (!customMessage.trim())}
                  className="px-4 py-2.5 bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-lg hover:from-red-700 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-100 transition-all duration-200 font-medium disabled:opacity-50 flex items-center"
                >
                  {sending ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Sending...
                    </>
                  ) : (
                    <>
                      <Mail className="w-4 h-4 mr-2" />
                      Send Warning
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Warnings List */}
        <div className="bg-white rounded-xl shadow-xs border border-gray-200 overflow-hidden">
          <div className="border-b border-gray-200 px-6 py-4">
            <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
              <h2 className="text-lg font-semibold text-gray-900">Warning History</h2>
              {filteredWarnings.length > 0 && (
                <p className="text-xs text-gray-600">
                  Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredWarnings.length)} of {filteredWarnings.length} warnings
                </p>
              )}
            </div>
          </div>

          {filteredWarnings.length === 0 ? (
            <div className="p-12 text-center">
              <div className="w-16 h-16 bg-gray-50 rounded-full flex items-center justify-center mx-auto mb-4">
                <AlertTriangle className="w-6 h-6 text-gray-400" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {warningSearchTerm ? 'No matching warnings found' : 'No warnings issued'}
              </h3>
              <p className="text-gray-500 max-w-md mx-auto">
                {warningSearchTerm ? 'Try a different search term' : 'Issued warnings will appear here for record keeping.'}
              </p>
            </div>
          ) : (
            <>
              <div className="divide-y divide-gray-200">
                {paginatedWarnings.map(warning => (
                  <div key={warning.id} className="px-6 py-4 hover:bg-gray-50 transition-colors">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h3 className="text-xs font-semibold text-gray-900">
                            {warning.employeeData?.fullName || 'Unknown Employee'}
                          </h3>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(warning.severity)}`}>
                            {warning.severity}
                          </span>
                        </div>
                        
                        <div className="flex flex-wrap items-center gap-4 mb-2 text-xs text-gray-600">
                          <div className="flex items-center">
                            <Mail className="w-3 h-3 mr-1" />
                            {warning.employeeData?.email || 'No email'}
                          </div>
                          <div className="flex items-center">
                            <Building className="w-3 h-3 mr-1" />
                            {warning.employeeData?.department || 'No department'}
                          </div>
                          <div className="flex items-center">
                            <BadgeAlert className="w-3 h-3 mr-1" />
                            ID: {warning.employee_id}
                          </div>
                        </div>
                        
                        <p className="text-xs text-gray-800 mb-2 leading-relaxed">{warning.message}</p>
                        
                        <div className="flex items-center text-xs text-gray-500">
                          <Calendar className="w-3 h-3 mr-1" />
                          {new Date(warning.issued_at).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                          <span className="mx-2">•</span>
                          <FileText className="w-3 h-3 mr-1" />
                          {warning.type}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Pagination Controls */}
              {totalPages > 1 && (
                <div className="border-t border-gray-200 px-6 py-4">
                  <div className="flex items-center justify-between">
                    <div className="text-xs text-gray-600">
                      Page {currentPage} of {totalPages}
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handlePageChange(currentPage - 1)}
                        disabled={currentPage === 1}
                        className="p-2 rounded-md border border-gray-300 bg-white text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-xs"
                      >
                        <ChevronLeft className="w-4 h-4" />
                      </button>
                      
                      {getPageNumbers().map((page, index) => (
                        <button
                          key={index}
                          onClick={() => typeof page === 'number' ? handlePageChange(page) : null}
                          disabled={page === '...'}
                          className={`min-w-[2.5rem] px-2 py-1 rounded-md border transition-colors text-xs ${
                            currentPage === page
                              ? 'border-red-600 bg-red-600 text-white'
                              : 'border-gray-300 bg-white text-gray-600 hover:bg-gray-50'
                          } ${page === '...' ? 'cursor-default' : ''}`}
                        >
                          {page}
                        </button>
                      ))}
                      
                      <button
                        onClick={() => handlePageChange(currentPage + 1)}
                        disabled={currentPage === totalPages}
                        className="p-2 rounded-md border border-gray-300 bg-white text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-xs"
                      >
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
}